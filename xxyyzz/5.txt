1
#Data Analytics II 
#1.Logistic Regression

2
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from math import exp

3
data = pd.read_csv("Social_Network_Ads.csv")
data.head()

4
data.describe()

5
#visualizing the dataset
plt.scatter(data['Age'],data['Purchased'])
plt.xlabel("age") 
plt.ylabel("purchased")
plt.show()

#divide data to training set and test set
X_train, X_test,y_train,y_test = train_test_split(data['Age'],data['Purchased'],test_size=0.20)

6
from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
model.fit(X_train.values.reshape(-1,1),y_train.values.reshape(-1,1).ravel())

y_pred_sk = model.predict(X_test.values.reshape(-1, 1)) 
plt.clf()
plt.scatter(X_test, y_test) 
plt.scatter(X_test,y_pred_sk,c="red")
plt.xlabel("age") 
plt.ylabel("purchased") 
plt.show()
print(f"Accuracy = {model.score(X_test.values.reshape(-1,1),y_test.values.reshape(-1, 1))}")

7
#Confusion Matrix 
from sklearn.metrics import confusion_matrix 
tn, fp, fn, tp = confusion_matrix(y_test, y_pred_sk).ravel() 
print("True Negatives: ",tn) 
print("False Positives: ",fp) 
print("False Negatives: ",fn) 
print("True Positives: ",tp)

8
#accuracy
Accuracy = (tn+tp)*100/(tp+tn+fp+fn) 
print("Accuracy {:0.2f}%:".format(Accuracy))

9
#precision
Precision = tp/(tp+fp)
print("Precision {:0.2f}".format(Precision))

10
#Recall
Recall = tp/(tp+fn)
print("Recall {:0.2f}".format(Recall))

11
#Error rate 
err = (fp + fn)/(tp + tn + fn + fp) 
print("Error rate {:0.2f}".format(err)) 
















